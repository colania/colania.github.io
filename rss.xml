<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://newzone.top/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://newzone.top/rss.xml" rel="self" type="application/rss+xml"/>
    <title>田野梦呓</title>
    <link>https://newzone.top/</link>
    <description>探索、经历、思考、归纳、自我提升，记录并输出一切能让自己提升的知识。</description>
    <language>zh-CN</language>
    <pubDate>Mon, 11 Sep 2023 15:50:00 GMT</pubDate>
    <lastBuildDate>Mon, 11 Sep 2023 15:50:00 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>工作英语</category>
    <category>行业追踪</category>
    <category>coding</category>
    <category>java</category>
    <item>
      <title>9.9-9.15 周记</title>
      <link>https://newzone.top/daily/2023-09-11.html</link>
      <guid>https://newzone.top/daily/2023-09-11.html</guid>
      <source url="https://newzone.top/rss.xml">9.9-9.15 周记</source>
      <description>9.9-9.15 周记 本周又要换一种格式来写，着实有点随心所欲了，不过也是在探索怎么写更容易让自己接受。 9.9日 最近三天带女朋友把Just Dance 给捡起来，果然还是得运动起来，运动的日子就会不会去想玩游戏或者是什么东西，感觉也可以把日常的学习也给捡起来了。加油，每天坚持。 今天看到戴锦华教授的一句话颇有感触，&amp;quot;我所受到的所有历史教育都是要教人倾听历史的无声处，而不是倾听大人物的洪亮言说&amp;quot;。目前国内大旗党反而占据言论主场， emmm .... 总想写点股票和经济相关的，但是感觉自己没总结好，还是算了。。。 本来想绑定之前买的一个国内的域名，不过还有备案等一堆麻烦事情，还是算了，后面再买个国外的域名吧。</description>
      <pubDate>Mon, 11 Sep 2023 15:47:15 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 9.9-9.15 周记</h1>
<p>本周又要换一种格式来写，着实有点随心所欲了，不过也是在探索怎么写更容易让自己接受。</p>
<h2> 9.9日</h2>
<ol>
<li>最近三天带女朋友把Just Dance 给捡起来，果然还是得运动起来，运动的日子就会不会去想玩游戏或者是什么东西，感觉也可以把日常的学习也给捡起来了。加油，每天坚持。</li>
<li>今天看到戴锦华教授的一句话颇有感触，"我所受到的所有历史教育都是要教人倾听历史的无声处，而不是倾听大人物的洪亮言说"。目前国内大旗党反而占据言论主场， emmm ....</li>
<li>总想写点股票和经济相关的，但是感觉自己没总结好，还是算了。。。</li>
<li>本来想绑定之前买的一个国内的域名，不过还有备案等一堆麻烦事情，还是算了，后面再买个国外的域名吧。</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>9.2-9.8周记</title>
      <link>https://newzone.top/daily/2023-09-08.html</link>
      <guid>https://newzone.top/daily/2023-09-08.html</guid>
      <source url="https://newzone.top/rss.xml">9.2-9.8周记</source>
      <description>9.2-9.8 周记 一周已经过去,不管是忙忙碌碌，还是无所作为，反正时间已经过去了，寿命-7天。 运动 运动是本周最为尴尬的类目，上周六雄心壮志制定了一周的健身计划。今天反过来一看emm... 9.3 跑步一次，腹肌轮 0 ， 俯卧撑 0 体重管理失败,下班回去以后还是吃了不少的碳水 陪女朋友下楼散步三次，勉强也算运动了吧。。 学习 英语：坚持背单词5天，周末只打卡没有背单词。听力还是每天坚持听完一个短视频，本周午饭后增加了 口语 的环节。 代码 : 代码方面0提升，懒惰了不少，不过还是找了一些AI模型玩了一下，在huggleface和modelscope上都有体验，modelscope关于视频方面的模型太少了，现在视频方面的模型都不太行吗？还是单纯国内是这样。 算法 ：算法抽空开始继续做起来，重刷了 排序、递归 的一些常见题目，手生了。</description>
      <pubDate>Fri, 08 Sep 2023 10:53:10 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 9.2-9.8 周记</h1>
<p>一周已经过去,不管是忙忙碌碌，还是无所作为，反正时间已经过去了，寿命-7天。</p>
<h2> 运动</h2>
<p>运动是本周最为尴尬的类目，上周六雄心壮志制定了一周的健身计划。今天反过来一看emm...</p>
<ol>
<li>9.3 跑步一次，腹肌轮 0 ， 俯卧撑 0</li>
<li><strong>体重管理</strong>失败,下班回去以后还是吃了不少的碳水</li>
<li>陪女朋友下楼散步三次，勉强也算运动了吧。。</li>
</ol>
<h2> 学习</h2>
<ol>
<li><strong>英语</strong>：坚持背单词5天，周末只打卡没有背单词。听力还是每天坚持听完一个短视频，本周午饭后增加了 口语 的环节。</li>
<li><strong>代码</strong> : 代码方面0提升，懒惰了不少，不过还是找了一些AI模型玩了一下，在huggleface和modelscope上都有体验，modelscope关于视频方面的模型太少了，现在视频方面的模型都不太行吗？还是单纯国内是这样。</li>
<li><strong>算法</strong> ：算法抽空开始继续做起来，重刷了 排序、递归 的一些常见题目，手生了。</li>
</ol>
<h2> 生活</h2>
<ol>
<li>对博客重新改造了一下，主要是排版和图标方面，实在是不喜欢加图标，太丑了。本想做成导航栏和侧边栏联动，无奈前端玩不转，就这样吧。</li>
<li>第二个就是谈谈最近主机区闹得沸沸扬扬的超级小桀事件。说实话，我个人是觉得超级小桀还是蛮好的，现在都在批他说谎、口嗨....emm。说实话看了这么多年，没觉得他是这样子的一个人。结果各种反转，挺复杂吧。反正我也不是啥死忠粉，还是继续看下饭视频吧</li>
<li>这两年来，局势越来越差，越来越看不清前方的道路，想做一个缩头乌龟，逃回学校的象牙塔继续学习深造。看着朋友在国外读研，感觉她的生活状态和国内完全不一样了，朋友圈很relax，整个人看着都是那种比较放松，但是又在努力进取的状态，真羡慕。</li>
<li>打算开始学习obsidian笔记，在互联网呆的时间越久，就越加不敢相信各种云端存储，没有一个是正经公司。还是做好数据迁移吧。</li>
</ol>
<h2> 理财</h2>
<ol>
<li>股票：目前持仓 京东、小鹏、中国看涨ETF、法拉第未来，卖出sea。<br>
中国看涨ETF 现在还有一点盈利，也想出掉了。看目前美元不断拉伸的情况，出逃的外资会越来越多。 京东现在是啥逻辑，看不明白了 ，为啥会一直在跌， 本以为他季报会比较好，结果股价却是一直在走弱。 小鹏还是比较看好的，中国还是一篇蓝海。继续持有。而且和滴滴联手以后，以后滴滴司机的车型应该会往这边去转。</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>2023-09-07日记</title>
      <link>https://newzone.top/daily/2023-09-07.html</link>
      <guid>https://newzone.top/daily/2023-09-07.html</guid>
      <source url="https://newzone.top/rss.xml">2023-09-07日记</source>
      <description>2023-09-07记 今天对博客进行进一步的整理，感觉之前的太乱了，而且实在是喜欢不起来图标。我觉得好丑啊。。。。本想换成导航栏和侧边栏能联动的，找了半天vuepress的设置方式，奈何对前端不太了解，不会改这玩意，emmmm 就这样吧，重要的是内容（可能内容也一般。。）。</description>
      <pubDate>Thu, 07 Sep 2023 09:49:00 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 2023-09-07记</h1>
<p>今天对博客进行进一步的整理，感觉之前的太乱了，而且实在是喜欢不起来图标。我觉得好丑啊。。。。本想换成导航栏和侧边栏能联动的，找了半天vuepress的设置方式，奈何对前端不太了解，不会改这玩意，emmmm 就这样吧，重要的是内容（可能内容也一般。。）。</p>
]]></content:encoded>
    </item>
    <item>
      <title>电话会议</title>
      <link>https://newzone.top/english/work/meeting.html</link>
      <guid>https://newzone.top/english/work/meeting.html</guid>
      <source url="https://newzone.top/rss.xml">电话会议</source>
      <description>minutes an official written record of a meeting. someone write or type everything that is discused during the meeting. eg. If you ever miss a meeting ,you can ask for the minutes from the previous meeting. agenda A list of things that will be talked about during a meeting.</description>
      <category>工作英语</category>
      <pubDate>Fri, 24 Mar 2023 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2> minutes</h2>
<blockquote>
<p>an official written record of a meeting.<br>
someone write or type everything that is discused during the meeting.</p>
</blockquote>
<p>eg. If you ever miss a meeting ,you can ask for the minutes from the previous meeting.</p>
<h2> agenda</h2>
<blockquote>
<p>A list of things that will be talked about during a meeting.</p>
</blockquote>
<p>eg. On the agenda , we will talk about how to cut costs and about new procedures.</p>
<h2> clarify</h2>
<blockquote>
<p>make something clear and easy to understand.</p>
</blockquote>
<p>eg. Asking for someone to clarify something for you is okay to do in a meeting.</p>
<h2> HQ</h2>
<blockquote>
<p>headquarters. it is the main office of a company.</p>
</blockquote>
<p>eg. There are McDonalds all over the world , but their main office  or their HQ is in Chicago.</p>
<h2> indicate</h2>
<blockquote>
<p>to show or point out something.<br>
eg.</p>
</blockquote>
<ol>
<li>
<p>During a meeting, you may need someone to indicate specific details or imformation.Sometimes when you are looking at papers   you may not know what page they are looking at,so you need to indicate which page they are on.</p>
</li>
<li>
<p>They indicate where i made a mistake in a report.</p>
</li>
</ol>
<h2> carry on with/without</h2>
<blockquote>
<p>do something with/without sb<br>
eg. Please carry on without me . i'm so sick and can't come.</p>
</blockquote>
<h2> speak up</h2>
<blockquote>
<p>if you ask someone speak up . You are asking them to speak more loudly.</p>
</blockquote>
<p>eg.Can you speak up? We can't hear you .</p>
<h2> get down to business</h2>
<blockquote>
<p>start to do something that needs to be <a href="http://done.it" target="_blank" rel="noopener noreferrer">done.it</a> means to be serious about doing something .</p>
</blockquote>
<p>eg. Get down to business and messing around at work.</p>
<h2> sorry to interrupt.</h2>
<blockquote>
<p>if you having something important to add when someone is talking during a meeting.</p>
</blockquote>
<h2> as you all may know ..</h2>
<blockquote>
<p>before you say something  that everyone in the meeting should know.<br>
eg. As you all may know , we are switching office locations next month.</p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>2023-09-05日记</title>
      <link>https://newzone.top/daily/2023-09-05.html</link>
      <guid>https://newzone.top/daily/2023-09-05.html</guid>
      <source url="https://newzone.top/rss.xml">2023-09-05日记</source>
      <description>2023-09-05记 今天是随心记的第一次落笔，虽然开了坑，但是最近事情比较多（都是借口）。更真实的是，自己没有记日记的习惯，心里总是想着这件事，但是emm，不能落到实处。 今天负责的项目上线，4点多以后事情就比较少了。突然想起这件事情来，抽空放松一下。 工作 这两周负责把控当前项目进度，俗称owner。我一直在思考为什么互联网公司逐渐淡化“项目经理”的角色，而更倾向于让每个人都有可能成为项目经理。我在之前的公司，项目经理是需要专业资格认证的。我现在的任务包括入职培训、开发和项目管理，有时我会感到困惑，为什么这些事情总是一起涌来。其实，我认为我应该能够同时处理开发和项目管理，但入职培训的通知提前三四天就来了，接着我连续三天都在全身心投入入职培训，然后每天晚上还要继续工作。这确实有些累人。但这也是我第一次作为项目负责人，也是我在这家公司的第一次正式上线。我从这次经历中学习到了很多，也了解了很多流程。我明白了，应该预留一两天的时间来应对风险，以防有同事突然有事影响项目进度。 现在在这家公司，做事感觉很乱，但是貌似又有一些章法。感觉就是，这里打一枪，效果不好，然后马上换个地方再打一枪。 然后研发部门的老大还要要求每个月去复盘一次，看看你当前做的事情有没有价值，然后又要基于每个月做事的价值去考核你的绩效。emmm， 这谁还愿意做长周期的事情，每个月写一个小工具，绩效杠杠的。 当我和同事一起开发项目的时候，我深感互联网大厂的同事更加靠谱。他们能做到很多事情都不需要我亲自操心，而且设计和开发都能达到预期效果。而我现在的同事，虽然他们似乎什么都懂一些，但实际操作起来，却常常给人眼高手低的感觉。比如说，他们在 MySQL 表上增加索引，结果却没有按预期执行。不过他们的协调能力很强，我需要从他们身上学习。</description>
      <pubDate>Thu, 07 Sep 2023 05:36:53 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 2023-09-05记</h1>
<p>今天是随心记的第一次落笔，虽然开了坑，但是最近事情比较多（都是借口）。更真实的是，自己没有记日记的习惯，心里总是想着这件事，但是emm，不能落到实处。<br>
今天负责的项目上线，4点多以后事情就比较少了。突然想起这件事情来，抽空放松一下。</p>
<h2> 工作</h2>
<ol>
<li>
<p>这两周负责把控当前项目进度，俗称owner。我一直在思考为什么互联网公司逐渐淡化“项目经理”的角色，而更倾向于让每个人都有可能成为项目经理。我在之前的公司，项目经理是需要专业资格认证的。我现在的任务包括入职培训、开发和项目管理，有时我会感到困惑，为什么这些事情总是一起涌来。其实，我认为我应该能够同时处理开发和项目管理，但入职培训的通知提前三四天就来了，接着我连续三天都在全身心投入入职培训，然后每天晚上还要继续工作。这确实有些累人。但这也是我第一次作为项目负责人，也是我在这家公司的第一次正式上线。我从这次经历中学习到了很多，也了解了很多流程。我明白了，应该预留一两天的时间来应对风险，以防有同事突然有事影响项目进度。</p>
</li>
<li>
<p>现在在这家公司，做事感觉很乱，但是貌似又有一些章法。感觉就是，这里打一枪，效果不好，然后马上换个地方再打一枪。 然后研发部门的老大还要要求每个月去复盘一次，看看你当前做的事情有没有价值，然后又要基于每个月做事的价值去考核你的绩效。emmm， 这谁还愿意做长周期的事情，每个月写一个小工具，绩效杠杠的。</p>
</li>
<li>
<p>当我和同事一起开发项目的时候，我深感互联网大厂的同事更加靠谱。他们能做到很多事情都不需要我亲自操心，而且设计和开发都能达到预期效果。而我现在的同事，虽然他们似乎什么都懂一些，但实际操作起来，却常常给人眼高手低的感觉。比如说，他们在 MySQL 表上增加索引，结果却没有按预期执行。不过他们的协调能力很强，我需要从他们身上学习。</p>
</li>
</ol>
<h2> 生活</h2>
<ol>
<li>锻炼。 自从开了随心记以后，就开始锻炼身体，本想每天能够记录一下自己锻炼的历程，结果没落笔，但是每天坚持锻炼了，也算一个比较漂亮的开端。 前一段时间跑几百米就需要歇一下，现在能跑三公里不歇脚了。嗯，很大的进步。争取做到一口气跑五公里。 <strong>一定要注意运动完的拉伸运动，多用筋膜枪敲一敲肌肉！！</strong></li>
</ol>
<blockquote>
<p>谈到筋膜枪，感觉是今年买的比较值的东西了。之前体验过小一点的筋膜枪，感觉就是在挠痒痒，屁用没有。 偶然有一次在小米店里体验到了专业级的筋膜枪，敲起来真舒服，回家纠结了两天，还是入手了。现在基本上天天都在用，爽哦。</p>
</blockquote>
<ol start="2">
<li>
<p>长期精力减退。 感觉有很长时间了，做爱提不起兴趣，游戏提不起兴趣，出去玩也提不起兴趣，之前坚持过的读书、看学习视频也提不起兴趣。印象最深的就是，突然想玩大表哥2，游戏买了，120g下了，还没打开图标，就泄了。。。花了大几十和几个小时的时间，卸载不到5分钟。感觉整个人都很矛盾，能坚持锻炼，却不能用大块时间来做自己想做的时间。这算是心理阳痿了吧。。。。</p>
</li>
<li>
<p>上周五女朋友被工作压垮了，回家以后抱着痛哭，在坚持了2个月的007以后终于提辞职了（工资也很低），说实话我都搞不懂她为啥能坚持这么久，实在是太坚强了。做的是插画售课，简单来说就是运营各个平台，吸引来粉丝以后卖插画课。一周视频自己拍+剪、直播的图也得画，每天早上醒来就在看数据，一直忙到晚上直播结束，基本上这一天也就过去了。心疼。。</p>
</li>
<li>
<p>坚持学英语也有几个月了，但是感觉效果不太明显，之前一直在背单词，最近调整了一下策略，多去学习生活、工作中的常用语和口语，努力提高自己的spoken English。</p>
</li>
</ol>
<p>一旦开始写就停不下来了，感觉有好多事情可以写。。。算了，阳痿了，不想写了。。。丢一张图作为结束吧，是我最喜欢的镰鼬。<br>
</p>
]]></content:encoded>
    </item>
    <item>
      <title>随心记开坑</title>
      <link>https://newzone.top/daily/summary.html</link>
      <guid>https://newzone.top/daily/summary.html</guid>
      <source url="https://newzone.top/rss.xml">随心记开坑</source>
      <description>随心记开坑 随心记是我脑子一热突然想的名字，恰如起名，这个栏目下将会是自己随时的有感而发，或者是某一天的一篇日记。我自己的表达能力比较弱，我会用到chatGPT帮我去美化、调整一些措辞，以此来打磨我的表达能力。 我喜欢的一个油管主 @MoneyXYZ曾分享了一个关于 用chatGPT去写日记/做笔记 的视频,可以将每日碎片化的事情和语言表述整理成一段完整的记录，并做出一定的分析。 然后自己脑子一热，觉得这是一个good idea，因此开了这个栏目，也是希望能够督促到自己去表达、梳理自己经历过的一些事情。</description>
      <pubDate>Thu, 24 Aug 2023 11:46:36 GMT</pubDate>
      <content:encoded><![CDATA[<h1> 随心记开坑</h1>
<p>随心记是我脑子一热突然想的名字，恰如起名，这个栏目下将会是自己随时的有感而发，或者是某一天的一篇日记。我自己的表达能力比较弱，我会用到chatGPT帮我去美化、调整一些措辞，以此来打磨我的表达能力。</p>
<p>我喜欢的一个油管主 <a href="https://www.youtube.com/@MoneyXYZ" target="_blank" rel="noopener noreferrer">@MoneyXYZ</a>曾分享了一个关于 <a href="https://www.youtube.com/watch?v=ZRv0Z-M7NqM&amp;t=1s&amp;ab_channel=MoneyXYZ" target="_blank" rel="noopener noreferrer">用chatGPT去写日记/做笔记</a> 的视频,可以将每日碎片化的事情和语言表述整理成一段完整的记录，并做出一定的分析。 然后自己脑子一热，觉得这是一个good idea，因此开了这个栏目，也是希望能够督促到自己去表达、梳理自己经历过的一些事情。</p>
]]></content:encoded>
    </item>
    <item>
      <title>AI工具介绍</title>
      <link>https://newzone.top/posts/AI-tools.html</link>
      <guid>https://newzone.top/posts/AI-tools.html</guid>
      <source url="https://newzone.top/rss.xml">AI工具介绍</source>
      <description>AI工具介绍 随着当前网络数据量的爆发，基于大数据的AI，现在越来越智能了。尤其是chatgpt的推出，AI使用越来越广泛。 本文主要介绍当前广泛使用的AI工具。 chatGPT ChatGPT是一种基于Transformer架构的深度学习模型，可以对语言进行建模和生成。它可以处理问答、对话生成、文本生成等多种任务，可以认为是当前最为智能的AI工具。甚至有人将其称为新时代的奠基者，我们将从互联网时代进入AI时代。 当前chatGPT有两种使用方法： 通过官网使用。 通过chatGPT - API 使用</description>
      <category>行业追踪</category>
      <pubDate>Sat, 18 Mar 2023 11:20:09 GMT</pubDate>
      <content:encoded><![CDATA[<h1> AI工具介绍</h1>
<p>随着当前网络数据量的爆发，基于大数据的AI，现在越来越智能了。尤其是chatgpt的推出，AI使用越来越广泛。</p>
<p>本文主要介绍当前广泛使用的AI工具。</p>
<h2> chatGPT</h2>
<p>ChatGPT是一种基于Transformer架构的深度学习模型，可以对语言进行建模和生成。它可以处理问答、对话生成、文本生成等多种任务，可以认为是当前最为智能的AI工具。甚至有人将其称为新时代的奠基者，我们将从互联网时代进入AI时代。</p>
<p>当前chatGPT有两种使用方法：</p>
<ol>
<li>通过<a href="https://chat.openai.com/" target="_blank" rel="noopener noreferrer">官网</a>使用。</li>
<li>通过chatGPT - API 使用</li>
</ol>
<p>每个账号注册好以后，都有18美元的免费体验机会，这个还是相当给力的。</p>
<p>这里就不讲他如何注册了，当前网络上也有很多的注册方法，例如：</p>
<p><a href="https://juejin.cn/post/7198097078005841980" target="_blank" rel="noopener noreferrer">ChatGPT保姆级教程，一分钟学会使用ChatGPT</a></p>
<h3> 使用方法：</h3>
<ol>
<li>
<p>如何更好的使用chatGPT呢，有些人在使用时，可能觉得这个ai好智障，怎么答非所问的。其实你需要给他一个“人设” 。 比如，你需要告诉chatGPT说假设你是一个精研开发多年的JAVA工程师，擅长微服务架构。后续再进行提问时，答案会更加精准。</p>
<p><a href="%5B%5D(https://github.com/colania/awesome-chatgpt-prompts)">已经整理好的chatGPT人设语句</a></p>
<p><a href="https://github.com/colania/awesome-chatgpt-prompts-zh" target="_blank" rel="noopener noreferrer">中文调教指南</a></p>
</li>
<li>
<p>基于chatGPT的比较好用的二次开发工具。</p>
<ol>
<li>
<p><a href="https://github.com/colania/ChatGPT-Telegram-Workers" target="_blank" rel="noopener noreferrer">tg机器人接入chatGPT-API，且不需要提供服务器</a></p>
</li>
<li>
<p><a href="https://github.com/colania/chatgpt-web" target="_blank" rel="noopener noreferrer">用 Express 和 Vue3 搭建的 ChatGPT 演示网页,需要服务器，需要翻墙</a></p>
</li>
</ol>
</li>
</ol>
<h2> 代码</h2>
<p>自从ChatGPT发布以后，各种垂直领域的AI工具也被相继开发出来。作为软件开发，最先接触到的代码编写工具。</p>
<h3> <a href="https://www.cursor.so/" target="_blank" rel="noopener noreferrer">cursor.so</a></h3>
<p>尝试以后还是挺好用的，可以很容易的做一些需求，比如说算法题，还可以指定他的创作语言，哈哈哈哈。（字节大危机）</p>
<figure><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230320215027345.png" alt="image-20230320215027345" tabindex="0" loading="lazy"><figcaption>image-20230320215027345</figcaption></figure>
<h3> <a href="https://www.warp.dev/" target="_blank" rel="noopener noreferrer">Warp</a></h3>
<p>warp其实是一个比较新的一个为开发人员打造的Terminal工具。</p>
<p>Warp解决的痛点，是通过减少配置、方便输入，优化输出，增加常用命令行自动提示(通过fig)，方便查看历史记录，可定义流程，等等实现的。（这些官方可以找到，还是挺好用的）</p>
<p>今天发现Warp也接入了chatGPT，每天有100次的体验机会。</p>
<figure><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230320215533735.png" alt="image-20230320215533735" tabindex="0" loading="lazy"><figcaption>image-20230320215533735</figcaption></figure>
<h2> 文档</h2>
<h3> <a href="https://www.notion.so/product/ai" target="_blank" rel="noopener noreferrer">NotionAI</a></h3>
<p>Notion AI可以用来写文案、写策划、写表格、写视频脚本、帮忙读论文做总结等，只要涉及到文档相关的事情，他都会有很亮眼的发挥，可惜的是免费体验机会太少了，只有20次。（可以找某宝增加使用机会）</p>
<p>我在写一些文档的时候，很大一部分基础部分都会用他进行生成。</p>
<figure><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230320220639491.png" alt="image-20230320220639491" tabindex="0" loading="lazy"><figcaption>image-20230320220639491</figcaption></figure>
<h3> office copilot</h3>
<p>office copilot是我最为期待的一个工具。对外宣传可以<strong>协助用户生成文档、电子邮件、演示文稿和更多内容</strong>，而且演示效果也确实不错。但是现在还没有机会体验到。而且会接入到微软的所有office工具中，未来可期。</p>
<blockquote>
<p>With Copilot, you’re always in control. You decide what to keep, modify or discard. Now, you can be more creative in Word, more analytical in Excel, more expressive in PowerPoint, more productive in Outlook and more collaborative in Teams.</p>
</blockquote>
<figure><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/2ndary-image-for-March-16_.webp" alt="2ndary-image-for-March-16_" tabindex="0" loading="lazy"><figcaption>2ndary-image-for-March-16_</figcaption></figure>
<h2> 绘画工具(只介绍通过网络提供服务的)</h2>
<p>AI绘画在人工智能领域中大放异彩，现在只要你浏览互联网，基本上都能发现各种AI画画，而且质量越来越高，越来越逼真，有很多创作已经分不清是照片还是AI绘画。</p>
<h3> <a href="https://openai.com/product/dall-e-2" target="_blank" rel="noopener noreferrer">DALL-E 2</a></h3>
<p>「DALL-E 2」，名称合成自超现实主义艺术家“萨尔瓦多·达利(Salvador Dalí)”和《机器人总动员》的英文名“WALL-E”。 也是OPEN-AI的作品之一。</p>
<figure><img src="https://pic2.zhimg.com/v2-360acc4244e461369d92861fc23c60d9_b.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<h3> <a href="https://www.midjourney.com" target="_blank" rel="noopener noreferrer">Midjourney</a></h3>
<p>Midjourney AI是架设在discord上一个AI工具，使用起来也很方便，可以不断的进行优化。生成效果真的不错。</p>
<p>我在使用时会通过chatGPT将我想要绘画的内容以Midjourney 能够识别的词提取关键字，然后再将这些关键词传给Midjourney进行绘画，效果还是不错滴。而且在频道中有很多大佬分享他们的AI创作。</p>
<figure><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230320221218533.png" alt="image-20230320221218533" tabindex="0" loading="lazy"><figcaption>image-20230320221218533</figcaption></figure>
<h3> <a href="https://huggingface.co/spaces/stabilityai/stable-diffusion" target="_blank" rel="noopener noreferrer">StableDiffusion</a></h3>
<p>“Stable Diffusion”是开源图像合成模型，这个 AI 作画工具几乎可以模仿任何视觉风格，如果你输入一个描述性短语，图像就会像魔术一样出现在你的屏幕上。 使用这个工具时，最重要的是找到他能够识别的关键词。</p>
<figure><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230320221727648.png" alt="image-20230320221727648" tabindex="0" loading="lazy"><figcaption>image-20230320221727648</figcaption></figure>
<h2> 国内的AI工具</h2>
<h3> 文言一心</h3>
<p>虽然百度文言一心的发布会直播让人尬的直抠脚。没有进行现场演示，只敢放录播不敢实际操作，说的难听一点，<a href="https://www.zhihu.com/search?q=%E8%B4%BE%E8%B7%83%E4%BA%AD&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2939535808%7D" target="_blank" rel="noopener noreferrer">贾跃亭</a>如果是PPT造车的，那<a href="https://www.zhihu.com/search?q=%E6%9D%8E%E5%BD%A6%E5%AE%8F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2939535808%7D" target="_blank" rel="noopener noreferrer">李彦宏</a>就是PPT造了个AIGC的大模型。</p>
<p>在实际体验的时候，确实效果不尽如人意。但是很很明确的是，这个一定是百度自研的，而不是chatGPT套壳软件。在当前世界脱钩的情况下，在AI方面，拥有一款国产自主的工具也是会有很广泛的市场。目前来看，文言一心相比chatGPT来说也就落后一两年，希望能够不断进步，查缺补漏。</p>
<p>有人说发布会没开多久，股民直接就用脚投票了，但是后面几天的连续猛涨，还是能看出来市场很看好他的未来。</p>
]]></content:encoded>
      <enclosure url="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230320215027345.png" type="image/png"/>
    </item>
    <item>
      <title>ConcurrentHashMap 源码分析</title>
      <link>https://newzone.top/posts/ConcurrentHashMap-analyse.html</link>
      <guid>https://newzone.top/posts/ConcurrentHashMap-analyse.html</guid>
      <source url="https://newzone.top/rss.xml">ConcurrentHashMap 源码分析</source>
      <description>ConcurrentHashMap类图 image-20230321163458604 根据类图看出来，ConcurrentHashMap实现了 Map 接口，继承了 AbstractMap 抽象类，所以大多数的方法也都和我们平时用到的HashMap是相同的，HashMap 有的方法，ConcurrentHashMap 几乎都有，所以当我们需要从 HashMap 切换到 ConcurrentHashMap 时，无需关心两者之间的兼容问题。</description>
      <category>coding</category>
      <pubDate>Sat, 18 Mar 2023 11:29:10 GMT</pubDate>
      <content:encoded><![CDATA[<h2> ConcurrentHashMap类图</h2>
<figure><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230321163458604.png" alt="image-20230321163458604" tabindex="0" loading="lazy"><figcaption>image-20230321163458604</figcaption></figure>
<p>根据类图看出来，ConcurrentHashMap实现了 Map 接口，继承了 AbstractMap 抽象类，所以大多数的方法也都和我们平时用到的HashMap是相同的，HashMap 有的方法，ConcurrentHashMap 几乎都有，所以当我们需要从 HashMap 切换到 ConcurrentHashMap 时，无需关心两者之间的兼容问题。</p>
<h2> <strong>ConcurrentHashMap几个重要概念</strong></h2>
<h3> 重要参数</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 重要结构</h3>
<ol>
<li>Node&lt;K,V&gt;,这是构成每个元素的基本类。</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>TreeNode构造树的节点</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>TreeBin 不保存用户键或值，而是指向 TreeNode 及其根的列表，由TreeBin完成对红黑树的包装。他们还维护一个读写锁。</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 重要锁</h3>
<ol>
<li><strong>Unsafe CAS</strong></li>
</ol>
<p>在ConcurrentHashMap中，随处可见**<strong>等类似的方法。这个算法的基本思想就是不断地去比较当前内存中的变量值与你指定的一个变量值是否相等，如果相等，则接受你指定的修改的值，否则拒绝你的操作。与我们常见的</strong>乐观锁**类似。</p>
<blockquote>
<p>Unsafe是位于sun.misc包下的一个类，主要提供一些用于执行低级别、不安全操作的方法，如直接访问系统内存资源、自主管理内存资源等，这些方法在提升Java运行效率、增强Java语言底层资源操作能力方面起到了很大的作用。但由于Unsafe类使Java语言拥有了类似C语言指针一样操作内存空间的能力，这无疑也增加了程序发生相关指针问题的风险。在程序中过度、不正确使用Unsafe类会使得程序出错的概率变大，使得Java这种安全的语言变得不再“安全”</p>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>
<p>synchronized</p>
<p><em>synchronized</em>是Java中的关键字，是一种同步锁.</p>
</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 方法拆解</h2>
<h3> 1. 构造方法</h3>
<p>​	在任何一个构造方法中，都没有对存储Map元素Node的table变量进行初始化。而是在第一次put操作的时候在进行初始化。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 2. PUT</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 3. ConcurrentHashMap的扩容详解</h3>
<ul>
<li>在同一个节点的个数超过8个的时候，会调用treeifyBin方法来看看是扩容还是转化为一棵树</li>
<li>同时在每次添加完元素的addCount方法中，也会判断当前数组中的元素是否达到了sizeCtl的量，如果达到了的话，则会进入transfer方法去扩容</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在tryPresize方法中，并没有加锁，允许多个线程进入，如果数组正在扩张，则当前线程也去帮助扩容。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>扩容操作：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>fn&amp;n</code>可以快速把链表中的元素区分成两类，A类是hash值的第X位为0，B类是hash值的第X位为1，并通过<code>lastRun</code>记录最后需要处理的节点，A类和B类节点可以分散到新数组的槽位14和30中，在原数组的槽位中，蓝色节点第X为0，红色节点第X为1，把链表拉平显示如下：</p>
<figure><img src="https://upload-images.jianshu.io/upload_images/2184951-5e60c316353e8a8f.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
<ol>
<li>
<p>通过遍历链表，记录<code>runBit</code>和<code>lastRun</code>，分别为1和节点6，所以设置<code>hn</code>为节点6，<code>ln</code>为null；</p>
</li>
<li>
<p>重新遍历链表，以<code>lastRun</code>节点为终止条件，根据第X位的值分别构造ln链表和hn链表：</p>
<ol>
<li>ln：</li>
</ol>
<figure><img src="https://upload-images.jianshu.io/upload_images/2184951-00e946e7b274a8af.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="ln链" tabindex="0" loading="lazy"><figcaption>ln链</figcaption></figure>
<ol start="2">
<li>
<p>Hn:</p>
<figure><img src="https://upload-images.jianshu.io/upload_images/2184951-bcc2a0170ec52d9d.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>
</li>
</ol>
</li>
<li>
<p>通过CAS把ln链表设置到新数组的i位置，hn链表设置到i+n的位置；</p>
</li>
</ol>
<p>如果该槽位是红黑树结构，则构造树节点<code>lo</code>和<code>hi</code>，遍历红黑树中的节点，同样根据<code>hash&amp;n</code><a href="http://lib.csdn.net/base/datastructure" target="_blank" rel="noopener noreferrer">算法</a>，把节点分为两类，分别插入到<code>lo</code>和<code>hi</code>为头的链表中，根据<code>lo</code>和<code>hi</code>链表中的元素个数分别生成<code>ln</code>和<code>hn</code>节点，其中<code>ln</code>节点的生成逻辑如下：</p>
<ol>
<li>如果<code>lo</code>链表的元素个数小于等于<code>UNTREEIFY_THRESHOLD</code>，默认为6，则通过<code>untreeify</code>方法把树节点链表转化成普通节点链表；</li>
<li>否则判断<code>hi</code>链表中的元素个数是否等于0：如果等于0，表示<code>lo</code>链表中包含了所有原始节点，则设置原始红黑树给<code>ln</code>，否则根据<code>lo</code>链表重新构造红黑树。</li>
<li>最后，同样的通过CAS把<code>ln</code>设置到新数组的<code>i</code>位置，<code>hn</code>设置到<code>i+n</code>位置。</li>
</ol>
<p>​</p>
<h3> 4. GET</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230321163458604.png" type="image/png"/>
    </item>
    <item>
      <title>Dubbo-SPI解析</title>
      <link>https://newzone.top/posts/Dubbo-SPI.html</link>
      <guid>https://newzone.top/posts/Dubbo-SPI.html</guid>
      <source url="https://newzone.top/rss.xml">Dubbo-SPI解析</source>
      <description>Dubbo SPI 解析（Java SPI解析）（上） SPI是什么 SPI全称Service Provider Interface，是Java提供的一套用来被第三方实现或者扩展的API，它可以用来启用框架扩展和替换组件。 image-20230331142758791</description>
      <category>java</category>
      <pubDate>Fri, 31 Mar 2023 13:40:43 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Dubbo SPI 解析（Java SPI解析）（上）</h1>
<h2> SPI是什么</h2>
<p>SPI全称Service Provider Interface，是Java提供的一套用来被第三方实现或者扩展的API，它可以用来启用框架扩展和替换组件。</p>
<figure><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230331142758791.png" alt="image-20230331142758791" tabindex="0" loading="lazy"><figcaption>image-20230331142758791</figcaption></figure>
<p>Java SPI 实际上是“<strong>基于接口的编程＋策略模式＋配置文件</strong>”组合实现的动态加载机制。</p>
<p>系统设计的各个抽象，往往有很多不同的实现方案，在面向的对象的设计里，一般推荐模块之间基于接口编程，模块之间不对实现类进行硬编码。一旦代码里涉及具体的实现类，就违反了可拔插的原则，如果需要替换一种实现，就需要修改代码。为了实现在模块装配的时候能不在程序里动态指明，这就需要一种服务发现机制。<br>
Java SPI就是提供这样的一个机制：为某个接口寻找服务实现的机制。有点类似IOC的思想，就是将装配的控制权移到程序之外，在模块化设计中这个机制尤其重要。所以SPI的核心思想就是<strong>解耦</strong>。</p>
<h2> 使用场景</h2>
<p>适用于：<strong>调用者根据实际使用需要，启用、扩展、或者替换框架的实现策略</strong></p>
<ul>
<li>数据库驱动JDBC加载不同类型数据库驱动</li>
<li>SL4J 加载不同日志实现</li>
</ul>
<h2> 使用方式</h2>
<ul>
<li>服务的提供者提供了一种接口的实现</li>
<li>在 Classpath 下的<code> META-INF/services/</code> 目录里创建一个以服务接口命名的文件，此文件记录了该 jar 包提供的服务接口的具体实现类</li>
<li>引入服务的应用通过<code>java.util.ServiceLoder</code>动态装载实现模块，它通过扫描<code>META-INF/services</code>目录下的配置文件找到实现类的全限定名，把类加载到JVM</li>
<li>SPI的实现类必须携带一个不带参数的构造方法；</li>
</ul>
<p>下面我们通过一个简单的示例演示下 JDK SPI 的基本使用方式：</p>
<figure><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230331142950553.png" alt="image-20230331142950553" tabindex="0" loading="lazy"><figcaption>image-20230331142950553</figcaption></figure>
<p>首先我们需要创建一个 Log 接口，来模拟日志打印的功能：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来提供两个实现—— Logback 和 Log4j，分别代表两个不同日志框架的实现，如下所示：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在项目的 resources/META-INF/services 目录下添加一个名为<code> com.matt.MyLog</code> 的文件，这是 JDK SPI 需要读取的配置文件，具体内容如下：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230331143206507.png" alt="image-20230331143206507" tabindex="0" loading="lazy"><figcaption>image-20230331143206507</figcaption></figure>
<p>最后创建 main() 方法，其中会加载上述配置文件，创建全部 MyLog 接口实现的实例，并执行其 log() 方法，如下所示：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 原理解析</h2>
<p>通过上述示例，我们可以看到 JDK SPI 的入口方法是 ServiceLoader.load() 方法，接下来我们就对其具体实现进行深入分析。</p>
<figure><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/Ciqc1F8o_V6AR93jAABeDIu_Kso211.png" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure>
<p>在 reload() 方法中，首先会清理 providers 缓存（LinkedHashMap 类型的集合），该缓存用来记录 ServiceLoader 创建的实现对象，其中 Key 为实现类的完整类名，Value 为实现类的对象。之后创建 LazyIterator 迭代器，用于读取 SPI 配置文件并实例化实现类对象。</p>
<p>ServiceLoader.reload() 方法的实现：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在前面的示例中，main() 方法中使用的迭代器底层就是调用了 <code>ServiceLoader.LazyIterator</code> 实现的。Iterator 接口有两个关键方法：<code>hasNext() </code>方法和 <code>next() </code>方法。这里的 LazyIterator 中的next() 方法最终调用的是其 nextService() 方法，hasNext() 方法最终调用的是 <code>hasNextService() </code>方法，调用关系如下图所示：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>来看看<code>LazyIterator.hasNextService()</code>方法，该方法主要是<strong>负责查找 META-INF/services 目录下的 SPI 配置文件</strong>，并进行遍历，大致实现如下所示：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>hasNextService()</code> 方法中完成 SPI 配置文件的解析之后，再来看<code>LazyIterator.nextService()</code>方法，该方法<strong>负责实例化 <code>hasNextService()</code> 方法读取到的实现类</strong>，其中会将实例化的对象放到 providers 集合中缓存起来，核心实现如下所示：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上就是Java SPI的核心实现。</p>
<h2> Java SPI 在JDBC的应用</h2>
<p>JDK 中只定义了一个 java.sql.Driver 接口，具体的实现是由不同数据库厂商来提供的。这里我们就以 MySQL 提供的 JDBC 实现包为例进行分析。</p>
<p>在 mysql-connector-java-*.jar 包中的 META-INF/services 目录下，有一个 java.sql.Driver 文件中只有一行内容，如下所示：</p>
<figure><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230401214849877.png" alt="image-20230401214849877" tabindex="0" loading="lazy"><figcaption>image-20230401214849877</figcaption></figure>
<p>在使用 mysql-connector-java-*.jar 包连接 MySQL 数据库的时候，我们会用到如下语句创建数据库连接：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>DriverManager 是 JDK 提供的数据库驱动管理器</strong>，其中的静态代码块，如下所示：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在调用 getConnection() 方法的时候，DriverManager 类会被 Java 虚拟机加载、解析并触发 static 代码块的执行。</p>
<p>在 loadInitialDrivers() 方法中通过 JDK SPI 扫描 Classpath 下 java.sql.Driver 接口实现类并实例化，核心实现如下所示：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>使用Java SPI机制的优势是实现解耦，使得第三方服务模块的装配控制的逻辑与调用者的业务代码分离，而不是耦合在一起。应用程序可以根据实际业务情况启用框架扩展或替换框架组件。</p>
]]></content:encoded>
      <enclosure url="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230331142758791.png" type="image/png"/>
    </item>
    <item>
      <title>Dubbo时间轮</title>
      <link>https://newzone.top/posts/Dubbo-time-wheel.html</link>
      <guid>https://newzone.top/posts/Dubbo-time-wheel.html</guid>
      <source url="https://newzone.top/rss.xml">Dubbo时间轮</source>
      <description>Dubbo时间轮 时间轮是一种高效的、批量管理定时任务的调度模型。时间轮一般会实现成一个环形结构，类似一个时钟，分为很多槽，一个槽代表一个时间间隔，每个槽使用双向链表存储定时任务；指针周期性地跳动，跳动到一个槽位，就执行该槽位的定时任务。 1.png</description>
      <category>java</category>
      <pubDate>Sun, 02 Apr 2023 21:58:16 GMT</pubDate>
      <content:encoded><![CDATA[<h1> Dubbo时间轮</h1>
<p><strong>时间轮是一种高效的、批量管理定时任务的调度模型</strong>。时间轮一般会实现成一个环形结构，类似一个时钟，分为很多槽，一个槽代表一个时间间隔，每个槽使用双向链表存储定时任务；指针周期性地跳动，跳动到一个槽位，就执行该槽位的定时任务。</p>
<figure><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/CgqCHl8yQfKAEM41AAB8fTu5PCY623.png" alt="1.png" tabindex="0" loading="lazy"><figcaption>1.png</figcaption></figure>
<p>需要注意的是，单层时间轮的容量和精度都是有限的，对于精度要求特别高、时间跨度特别大或是海量定时任务需要调度的场景，通常会使用<strong>多级时间轮</strong>以及<strong>持久化存储与时间轮结合</strong>的方案。</p>
<p>那在 Dubbo 中，时间轮的具体实现方式是怎样的呢？Dubbo 的时间轮实现位于 dubbo-common 模块的 <code>org.apache.dubbo.common.timer </code>包中，下面我们就来分析时间轮涉及的核心接口和实现。</p>
<h2> 核心接口</h2>
<h3> TimerTask接口</h3>
<p>在 Dubbo 中，所有的定时任务都要继承 <strong>TimerTask 接口</strong>。TimerTask 接口非常简单，只定义了一个 run() 方法，该方法的入参是一个 Timeout 接口的对象。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Timeout接口</h3>
<p>Timeout 对象与 TimerTask 对象一一对应，两者的关系类似于线程池返回的 Future 对象与提交到线程池中的任务对象之间的关系。通过 Timeout 对象，我们不仅可以查看定时任务的状态，还可以操作定时任务（例如取消关联的定时任务）。</p>
<figure><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230402222206190.png" alt="image-20230402222206190" tabindex="0" loading="lazy"><figcaption>image-20230402222206190</figcaption></figure>
<h3> Timer接口</h3>
<p>Timer 接口定义了定时器的基本行为，如下图所示，其核心是 newTimeout() 方法：提交一个定时任务（TimerTask）并返回关联的 Timeout 对象，这有点类似于向线程池提交任务的感觉。</p>
<figure><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230402222333395.png" alt="image-20230402222333395" tabindex="0" loading="lazy"><figcaption>image-20230402222333395</figcaption></figure>
<figure><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230402223154974.png" alt="image-20230402223154974" tabindex="0" loading="lazy"><figcaption>image-20230402223154974</figcaption></figure>
<h2> 接口实现</h2>
<h3> HashedWheelTimeout</h3>
<p>HashedWheelTimeout 是 Timeout 接口的唯一实现，是 HashedWheelTimer 的内部类。HashedWheelTimeout 扮演了两个角色：</p>
<ul>
<li>第一个，时间轮中双向链表的<strong>节点</strong>，即定时任务 TimerTask 在 HashedWheelTimer 中的容器。</li>
<li>第二个，定时任务 TimerTask 提交到 HashedWheelTimer 之后返回的<strong>句柄</strong>（Handle），用于在时间轮外部查看和控制定时任务。</li>
</ul>
<h4> HashedWheelTimeout 中的核心字段如下：</h4>
<blockquote>
<ul>
<li><strong>prev、next（HashedWheelTimeout类型）</strong>，分别对应当前定时任务在链表中的前驱节点和后继节点。</li>
<li><strong>task（TimerTask类型）</strong>，指实际被调度的任务。</li>
<li><strong>deadline（long类型）</strong>，指定时任务执行的时间。这个时间是在创建 HashedWheelTimeout 时指定的，计算公式是：currentTime（创建 HashedWheelTimeout 的时间） + delay（任务延迟时间） - startTime（HashedWheelTimer 的启动时间），时间单位为纳秒。</li>
<li><strong>state（volatile int类型）</strong>，指定时任务当前所处状态，可选的有三个，分别是 INIT（0）、CANCELLED（1）和 EXPIRED（2）。另外，还有一个 STATE_UPDATER 字段（AtomicIntegerFieldUpdater类型）实现 state 状态变更的原子性。</li>
<li><strong>remainingRounds（long类型）</strong>，指当前任务剩余的时钟周期数。时间轮所能表示的时间长度是有限的，在任务到期时间与当前时刻的时间差，超过时间轮单圈能表示的时长，就出现了套圈的情况，需要该字段值表示剩余的时钟周期。</li>
</ul>
</blockquote>
<h4> HashedWheelTimeout 中的核心方法有：</h4>
<blockquote>
<ul>
<li><strong>isCancelled()、isExpired() 、state() 方法，</strong> 主要用于检查当前 HashedWheelTimeout 状态。</li>
<li><strong>cancel() 方法，</strong> 将当前 HashedWheelTimeout 的状态设置为 CANCELLED，并将当前 HashedWheelTimeout 添加到 cancelledTimeouts 队列中等待销毁。</li>
<li><strong>expire() 方法，</strong> 当任务到期时，会调用该方法将当前 HashedWheelTimeout 设置为 EXPIRED 状态，然后调用其中的 TimerTask 的 run() 方法执行定时任务。</li>
<li><strong>remove() 方法，</strong> 将当前 HashedWheelTimeout 从时间轮中删除。</li>
</ul>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> HashedWheelBucket</h3>
<p>HashedWheelBucket 是时间轮中的一个槽，时间轮中的槽实际上就是一个用于缓存和管理双向链表的容器，双向链表中的每一个节点就是一个 HashedWheelTimeout 对象，也就关联了一个 TimerTask 定时任务。</p>
<p>HashedWheelBucket 持有双向链表的首尾两个节点，分别是 head 和 tail 两个字段，再加上每个 HashedWheelTimeout 节点均持有前驱和后继的引用，这样就可以正向或是逆向遍历整个双向链表了。</p>
<blockquote>
<ul>
<li><strong>addTimeout() 方法</strong>：新增 HashedWheelTimeout 到双向链表的尾部。</li>
<li><strong>pollTimeout() 方法</strong>：移除双向链表中的头结点，并将其返回。</li>
<li><strong>remove() 方法</strong>：从双向链表中移除指定的 HashedWheelTimeout 节点。</li>
<li><strong>clearTimeouts() 方法</strong>：循环调用 pollTimeout() 方法处理整个双向链表，并返回所有未超时或者未被取消的任务。</li>
<li><strong>expireTimeouts() 方法</strong>：遍历双向链表中的全部 HashedWheelTimeout 节点。 在处理到期的定时任务时，会通过 remove() 方法取出，并调用其 expire() 方法执行；对于已取消的任务，通过 remove() 方法取出后直接丢弃；对于未到期的任务，会将 remainingRounds 字段（剩余时钟周期数）减一。</li>
</ul>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> HashedWheelTimer</h3>
<p>HashedWheelTimer 是 Timer 接口的实现，它通过时间轮算法实现了一个定时器。</p>
<p>HashedWheelTimer 会根据当前时间轮指针选定对应的槽（HashedWheelBucket），从双向链表的头部开始迭代，对每个定时任务（HashedWheelTimeout）进行计算，属于当前时钟周期则取出运行，不属于则将其剩余的时钟周期数减一操作。</p>
<blockquote>
<ul>
<li><strong>workerState（volatile int类型）</strong>：时间轮当前所处状态，可选值有 init、started、shutdown。同时，有相应的 AtomicIntegerFieldUpdater 实现 workerState 的原子修改。</li>
<li><strong>startTime（long类型）</strong>：当前时间轮的启动时间，提交到该时间轮的定时任务的 deadline 字段值均以该时间戳为起点进行计算。</li>
<li><strong>wheel（HashedWheelBucket[]类型）</strong>：该数组就是时间轮的环形队列，每一个元素都是一个槽。当指定时间轮槽数为 n 时，实际上会取大于且最靠近 n 的 2 的幂次方值。</li>
<li><strong>timeouts、cancelledTimeouts（LinkedBlockingQueue类型）</strong>：timeouts 队列用于缓冲外部提交时间轮中的定时任务，cancelledTimeouts 队列用于暂存取消的定时任务。HashedWheelTimer 会在处理 HashedWheelBucket 的双向链表之前，先处理这两个队列中的数据。</li>
<li><strong>tick（long类型）</strong>：该字段在 HashedWheelTimer$Worker 中，是时间轮的指针，是一个步长为 1 的单调递增计数器。</li>
<li><strong>mask（int类型）</strong>：掩码， mask = wheel.length - 1，执行 ticks &amp; mask 便能定位到对应的时钟槽。</li>
<li><strong>ticksDuration（long类型）</strong>：时间指针每次加 1 所代表的实际时间，单位为纳秒。</li>
<li><strong>pendingTimeouts（AtomicLong类型）</strong>：当前时间轮剩余的定时任务总数。</li>
<li><strong>workerThread（Thread类型）</strong>：时间轮内部真正执行定时任务的线程。</li>
<li><strong>worker（Worker类型）</strong>：真正执行定时任务的逻辑封装这个 Runnable 对象中。</li>
</ul>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时间轮对外提供了一个 newTimeout() 接口用于提交定时任务，在定时任务进入到 timeouts 队列之前会先调用 start() 方法启动时间轮，其中会完成下面两个关键步骤：</p>
<ol>
<li>确定时间轮的 startTime 字段；</li>
<li>启动 workerThread 线程，开始执行 worker 任务。</li>
<li>之后根据 startTime 计算该定时任务的 deadline 字段，最后才能将定时任务封装成 HashedWheelTimeout 并添加到 timeouts 队列。</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们来分析时间轮指针一次转动的全流程。</p>
<ol>
<li>时间轮指针转动，时间轮周期开始。</li>
<li>清理用户主动取消的定时任务，这些定时任务在用户取消时，会记录到 cancelledTimeouts 队列中。在每次指针转动的时候，时间轮都会清理该队列。</li>
<li>将缓存在 timeouts 队列中的定时任务转移到时间轮中对应的槽中。</li>
<li>根据当前指针定位对应槽，处理该槽位的双向链表中的定时任务。</li>
<li>检测时间轮的状态。如果时间轮处于运行状态，则循环执行上述步骤，不断执行定时任务。如果时间轮处于停止状态，则执行下面的步骤获取到未被执行的定时任务并加入 unprocessedTimeouts 队列：遍历时间轮中每个槽位，并调用 clearTimeouts() 方法；对 timeouts 队列中未被加入槽中循环调用 poll()。</li>
<li>最后再次清理 cancelledTimeouts 队列中用户主动取消的定时任务。</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Dubbo 中如何使用定时任务</h2>
<p>在 Dubbo 中，时间轮并不直接用于周期性操作，而是只向时间轮提交执行单次的定时任务，在上一次任务执行完成的时候，调用 newTimeout() 方法再次提交当前任务，这样就会在下个周期执行该任务。即使在任务执行过程中出现了 GC、I/O 阻塞等情况，导致任务延迟或卡住，也不会有同样的任务源源不断地提交进来，导致任务堆积。</p>
<p>Dubbo 中对时间轮的应用主要体现在如下两个方面：</p>
<ul>
<li><strong>失败重试，</strong> 例如，Provider 向注册中心进行注册失败时的重试操作，或是 Consumer 向注册中心订阅时的失败重试等。</li>
<li><strong>周期性定时任务，</strong> 例如，定期发送心跳请求，请求超时的处理，或是网络连接断开后的重连机制。</li>
</ul>
<h4> 举例： 注册失败，失败重试</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
      <enclosure url="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/CgqCHl8yQfKAEM41AAB8fTu5PCY623.png" type="image/png"/>
    </item>
  </channel>
</rss>