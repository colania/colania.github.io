import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-c97a4cd2.js";const t={},p=e(`<h1 id="dubbo时间轮" tabindex="-1"><a class="header-anchor" href="#dubbo时间轮" aria-hidden="true">#</a> Dubbo时间轮</h1><p><strong>时间轮是一种高效的、批量管理定时任务的调度模型</strong>。时间轮一般会实现成一个环形结构，类似一个时钟，分为很多槽，一个槽代表一个时间间隔，每个槽使用双向链表存储定时任务；指针周期性地跳动，跳动到一个槽位，就执行该槽位的定时任务。</p><figure><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/CgqCHl8yQfKAEM41AAB8fTu5PCY623.png" alt="1.png" tabindex="0" loading="lazy"><figcaption>1.png</figcaption></figure><p>需要注意的是，单层时间轮的容量和精度都是有限的，对于精度要求特别高、时间跨度特别大或是海量定时任务需要调度的场景，通常会使用<strong>多级时间轮</strong>以及<strong>持久化存储与时间轮结合</strong>的方案。</p><p>那在 Dubbo 中，时间轮的具体实现方式是怎样的呢？Dubbo 的时间轮实现位于 dubbo-common 模块的 <code>org.apache.dubbo.common.timer </code>包中，下面我们就来分析时间轮涉及的核心接口和实现。</p><h2 id="核心接口" tabindex="-1"><a class="header-anchor" href="#核心接口" aria-hidden="true">#</a> 核心接口</h2><h3 id="timertask接口" tabindex="-1"><a class="header-anchor" href="#timertask接口" aria-hidden="true">#</a> TimerTask接口</h3><p>在 Dubbo 中，所有的定时任务都要继承 <strong>TimerTask 接口</strong>。TimerTask 接口非常简单，只定义了一个 run() 方法，该方法的入参是一个 Timeout 接口的对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * A task which is executed after the delay specified with
 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Timer</span><span class="token punctuation">#</span><span class="token function">newTimeout</span><span class="token punctuation">(</span><span class="token class-name">TimerTask</span><span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> (TimerTask, long, TimeUnit)<span class="token punctuation">}</span>.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TimerTask</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * Executed after the delay specified with
     * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Timer</span><span class="token punctuation">#</span><span class="token function">newTimeout</span><span class="token punctuation">(</span><span class="token class-name">TimerTask</span><span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">timeout</span> a handle which is associated with this task
     */</span>
    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Timeout</span> timeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="timeout接口" tabindex="-1"><a class="header-anchor" href="#timeout接口" aria-hidden="true">#</a> Timeout接口</h3><p>Timeout 对象与 TimerTask 对象一一对应，两者的关系类似于线程池返回的 Future 对象与提交到线程池中的任务对象之间的关系。通过 Timeout 对象，我们不仅可以查看定时任务的状态，还可以操作定时任务（例如取消关联的定时任务）。</p><figure><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230402222206190.png" alt="image-20230402222206190" tabindex="0" loading="lazy"><figcaption>image-20230402222206190</figcaption></figure><h3 id="timer接口" tabindex="-1"><a class="header-anchor" href="#timer接口" aria-hidden="true">#</a> Timer接口</h3><p>Timer 接口定义了定时器的基本行为，如下图所示，其核心是 newTimeout() 方法：提交一个定时任务（TimerTask）并返回关联的 Timeout 对象，这有点类似于向线程池提交任务的感觉。</p><figure><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230402222333395.png" alt="image-20230402222333395" tabindex="0" loading="lazy"><figcaption>image-20230402222333395</figcaption></figure><figure><img src="https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/image-20230402223154974.png" alt="image-20230402223154974" tabindex="0" loading="lazy"><figcaption>image-20230402223154974</figcaption></figure><h2 id="接口实现" tabindex="-1"><a class="header-anchor" href="#接口实现" aria-hidden="true">#</a> 接口实现</h2><h3 id="hashedwheeltimeout" tabindex="-1"><a class="header-anchor" href="#hashedwheeltimeout" aria-hidden="true">#</a> HashedWheelTimeout</h3><p>HashedWheelTimeout 是 Timeout 接口的唯一实现，是 HashedWheelTimer 的内部类。HashedWheelTimeout 扮演了两个角色：</p><ul><li>第一个，时间轮中双向链表的<strong>节点</strong>，即定时任务 TimerTask 在 HashedWheelTimer 中的容器。</li><li>第二个，定时任务 TimerTask 提交到 HashedWheelTimer 之后返回的<strong>句柄</strong>（Handle），用于在时间轮外部查看和控制定时任务。</li></ul><h4 id="hashedwheeltimeout-中的核心字段如下" tabindex="-1"><a class="header-anchor" href="#hashedwheeltimeout-中的核心字段如下" aria-hidden="true">#</a> HashedWheelTimeout 中的核心字段如下：</h4><blockquote><ul><li><strong>prev、next（HashedWheelTimeout类型）</strong>，分别对应当前定时任务在链表中的前驱节点和后继节点。</li><li><strong>task（TimerTask类型）</strong>，指实际被调度的任务。</li><li><strong>deadline（long类型）</strong>，指定时任务执行的时间。这个时间是在创建 HashedWheelTimeout 时指定的，计算公式是：currentTime（创建 HashedWheelTimeout 的时间） + delay（任务延迟时间） - startTime（HashedWheelTimer 的启动时间），时间单位为纳秒。</li><li><strong>state（volatile int类型）</strong>，指定时任务当前所处状态，可选的有三个，分别是 INIT（0）、CANCELLED（1）和 EXPIRED（2）。另外，还有一个 STATE_UPDATER 字段（AtomicIntegerFieldUpdater类型）实现 state 状态变更的原子性。</li><li><strong>remainingRounds（long类型）</strong>，指当前任务剩余的时钟周期数。时间轮所能表示的时间长度是有限的，在任务到期时间与当前时刻的时间差，超过时间轮单圈能表示的时长，就出现了套圈的情况，需要该字段值表示剩余的时钟周期。</li></ul></blockquote><h4 id="hashedwheeltimeout-中的核心方法有" tabindex="-1"><a class="header-anchor" href="#hashedwheeltimeout-中的核心方法有" aria-hidden="true">#</a> HashedWheelTimeout 中的核心方法有：</h4><blockquote><ul><li><strong>isCancelled()、isExpired() 、state() 方法，</strong> 主要用于检查当前 HashedWheelTimeout 状态。</li><li><strong>cancel() 方法，</strong> 将当前 HashedWheelTimeout 的状态设置为 CANCELLED，并将当前 HashedWheelTimeout 添加到 cancelledTimeouts 队列中等待销毁。</li><li><strong>expire() 方法，</strong> 当任务到期时，会调用该方法将当前 HashedWheelTimeout 设置为 EXPIRED 状态，然后调用其中的 TimerTask 的 run() 方法执行定时任务。</li><li><strong>remove() 方法，</strong> 将当前 HashedWheelTimeout 从时间轮中删除。</li></ul></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">HashedWheelTimeout</span> <span class="token keyword">implements</span> <span class="token class-name">Timeout</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hashedwheelbucket" tabindex="-1"><a class="header-anchor" href="#hashedwheelbucket" aria-hidden="true">#</a> HashedWheelBucket</h3><p>HashedWheelBucket 是时间轮中的一个槽，时间轮中的槽实际上就是一个用于缓存和管理双向链表的容器，双向链表中的每一个节点就是一个 HashedWheelTimeout 对象，也就关联了一个 TimerTask 定时任务。</p><p>HashedWheelBucket 持有双向链表的首尾两个节点，分别是 head 和 tail 两个字段，再加上每个 HashedWheelTimeout 节点均持有前驱和后继的引用，这样就可以正向或是逆向遍历整个双向链表了。</p><blockquote><ul><li><strong>addTimeout() 方法</strong>：新增 HashedWheelTimeout 到双向链表的尾部。</li><li><strong>pollTimeout() 方法</strong>：移除双向链表中的头结点，并将其返回。</li><li><strong>remove() 方法</strong>：从双向链表中移除指定的 HashedWheelTimeout 节点。</li><li><strong>clearTimeouts() 方法</strong>：循环调用 pollTimeout() 方法处理整个双向链表，并返回所有未超时或者未被取消的任务。</li><li><strong>expireTimeouts() 方法</strong>：遍历双向链表中的全部 HashedWheelTimeout 节点。 在处理到期的定时任务时，会通过 remove() 方法取出，并调用其 expire() 方法执行；对于已取消的任务，通过 remove() 方法取出后直接丢弃；对于未到期的任务，会将 remainingRounds 字段（剩余时钟周期数）减一。</li></ul></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">HashedWheelBucket</span> <span class="token punctuation">{</span>

        <span class="token doc-comment comment">/**
         * Used for the linked-list datastructure
         */</span>
        <span class="token keyword">private</span> <span class="token class-name">HashedWheelTimeout</span> head<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">HashedWheelTimeout</span> tail<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hashedwheeltimer" tabindex="-1"><a class="header-anchor" href="#hashedwheeltimer" aria-hidden="true">#</a> HashedWheelTimer</h3><p>HashedWheelTimer 是 Timer 接口的实现，它通过时间轮算法实现了一个定时器。</p><p>HashedWheelTimer 会根据当前时间轮指针选定对应的槽（HashedWheelBucket），从双向链表的头部开始迭代，对每个定时任务（HashedWheelTimeout）进行计算，属于当前时钟周期则取出运行，不属于则将其剩余的时钟周期数减一操作。</p><blockquote><ul><li><strong>workerState（volatile int类型）</strong>：时间轮当前所处状态，可选值有 init、started、shutdown。同时，有相应的 AtomicIntegerFieldUpdater 实现 workerState 的原子修改。</li><li><strong>startTime（long类型）</strong>：当前时间轮的启动时间，提交到该时间轮的定时任务的 deadline 字段值均以该时间戳为起点进行计算。</li><li><strong>wheel（HashedWheelBucket[]类型）</strong>：该数组就是时间轮的环形队列，每一个元素都是一个槽。当指定时间轮槽数为 n 时，实际上会取大于且最靠近 n 的 2 的幂次方值。</li><li><strong>timeouts、cancelledTimeouts（LinkedBlockingQueue类型）</strong>：timeouts 队列用于缓冲外部提交时间轮中的定时任务，cancelledTimeouts 队列用于暂存取消的定时任务。HashedWheelTimer 会在处理 HashedWheelBucket 的双向链表之前，先处理这两个队列中的数据。</li><li><strong>tick（long类型）</strong>：该字段在 HashedWheelTimer$Worker 中，是时间轮的指针，是一个步长为 1 的单调递增计数器。</li><li><strong>mask（int类型）</strong>：掩码， mask = wheel.length - 1，执行 ticks &amp; mask 便能定位到对应的时钟槽。</li><li><strong>ticksDuration（long类型）</strong>：时间指针每次加 1 所代表的实际时间，单位为纳秒。</li><li><strong>pendingTimeouts（AtomicLong类型）</strong>：当前时间轮剩余的定时任务总数。</li><li><strong>workerThread（Thread类型）</strong>：时间轮内部真正执行定时任务的线程。</li><li><strong>worker（Worker类型）</strong>：真正执行定时任务的逻辑封装这个 Runnable 对象中。</li></ul></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashedWheelTimer</span> <span class="token keyword">implements</span> <span class="token class-name">Timer</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时间轮对外提供了一个 newTimeout() 接口用于提交定时任务，在定时任务进入到 timeouts 队列之前会先调用 start() 方法启动时间轮，其中会完成下面两个关键步骤：</p><ol><li>确定时间轮的 startTime 字段；</li><li>启动 workerThread 线程，开始执行 worker 任务。</li><li>之后根据 startTime 计算该定时任务的 deadline 字段，最后才能将定时任务封装成 HashedWheelTimeout 并添加到 timeouts 队列。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Timeout</span> <span class="token function">newTimeout</span><span class="token punctuation">(</span><span class="token class-name">TimerTask</span> task<span class="token punctuation">,</span> <span class="token keyword">long</span> delay<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">&quot;task&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>unit <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">&quot;unit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
				<span class="token comment">//判断当前时间轮剩余的定时任务总数。</span>
        <span class="token keyword">long</span> pendingTimeoutsCount <span class="token operator">=</span> pendingTimeouts<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>maxPendingTimeouts <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> pendingTimeoutsCount <span class="token operator">&gt;</span> maxPendingTimeouts<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            pendingTimeouts<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RejectedExecutionException</span><span class="token punctuation">(</span><span class="token string">&quot;Number of pending timeouts (&quot;</span>
                    <span class="token operator">+</span> pendingTimeoutsCount <span class="token operator">+</span> <span class="token string">&quot;) is greater than or equal to maximum allowed pending &quot;</span>
                    <span class="token operator">+</span> <span class="token string">&quot;timeouts (&quot;</span> <span class="token operator">+</span> maxPendingTimeouts <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
				<span class="token comment">//启动时间轮内部真正执行定时任务。</span>
        <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Add the timeout to the timeout queue which will be processed on the next tick.</span>
        <span class="token comment">// During processing all the queued HashedWheelTimeouts will be added to the correct HashedWheelBucket.</span>
        <span class="token keyword">long</span> deadline <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">;</span>

        <span class="token comment">// Guard against overflow.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>delay <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> deadline <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            deadline <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">HashedWheelTimeout</span> timeout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashedWheelTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> task<span class="token punctuation">,</span> deadline<span class="token punctuation">)</span><span class="token punctuation">;</span>
        timeouts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> timeout<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面我们来分析时间轮指针一次转动的全流程。</p><ol><li>时间轮指针转动，时间轮周期开始。</li><li>清理用户主动取消的定时任务，这些定时任务在用户取消时，会记录到 cancelledTimeouts 队列中。在每次指针转动的时候，时间轮都会清理该队列。</li><li>将缓存在 timeouts 队列中的定时任务转移到时间轮中对应的槽中。</li><li>根据当前指针定位对应槽，处理该槽位的双向链表中的定时任务。</li><li>检测时间轮的状态。如果时间轮处于运行状态，则循环执行上述步骤，不断执行定时任务。如果时间轮处于停止状态，则执行下面的步骤获取到未被执行的定时任务并加入 unprocessedTimeouts 队列：遍历时间轮中每个槽位，并调用 clearTimeouts() 方法；对 timeouts 队列中未被加入槽中循环调用 poll()。</li><li>最后再次清理 cancelledTimeouts 队列中用户主动取消的定时任务。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Initialize the startTime.</span>
            startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>startTime <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// We use 0 as an indicator for the uninitialized value here, so make sure it&#39;s not 0 when initialized.</span>
                startTime <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// Notify the other threads waiting for the initialization at start().</span>
            startTimeInitialized<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">do</span> <span class="token punctuation">{</span>
                <span class="token keyword">final</span> <span class="token keyword">long</span> deadline <span class="token operator">=</span> <span class="token function">waitForNextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>deadline <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">//掩码， mask = wheel.length - 1，执行 ticks &amp; mask 便能定位到对应的时钟槽。</span>
                    <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>tick <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">//清理用户主动取消的定时任务，这些定时任务在用户取消时，会记录到 cancelledTimeouts 队列中。在每次指针转动的时候，时间轮都会清理该队列。</span>
                    <span class="token function">processCancelledTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">HashedWheelBucket</span> bucket <span class="token operator">=</span>
                            wheel<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token comment">//将缓存在 timeouts 队列中的定时任务转移到时间轮中对应的槽中。</span>
                    <span class="token function">transferTimeoutsToBuckets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">//根据当前指针定位对应槽，处理该槽位的双向链表中的定时任务。</span>
                    bucket<span class="token punctuation">.</span><span class="token function">expireTimeouts</span><span class="token punctuation">(</span>deadline<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    tick<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">//时间轮处于运行状态</span>
            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token constant">WORKER_STATE_UPDATER</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">HashedWheelTimer</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">WORKER_STATE_STARTED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// Fill the unprocessedTimeouts so we can return them from stop() method.</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HashedWheelBucket</span> bucket <span class="token operator">:</span> wheel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//获取到未被执行的定时任务并加入 unprocessedTimeouts 队列</span>
                bucket<span class="token punctuation">.</span><span class="token function">clearTimeouts</span><span class="token punctuation">(</span>unprocessedTimeouts<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">HashedWheelTimeout</span> timeout <span class="token operator">=</span> timeouts<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">.</span><span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    unprocessedTimeouts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//再次清理 cancelledTimeouts 队列中用户主动取消的定时任务。</span>
            <span class="token function">processCancelledTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dubbo-中如何使用定时任务" tabindex="-1"><a class="header-anchor" href="#dubbo-中如何使用定时任务" aria-hidden="true">#</a> Dubbo 中如何使用定时任务</h2><p>在 Dubbo 中，时间轮并不直接用于周期性操作，而是只向时间轮提交执行单次的定时任务，在上一次任务执行完成的时候，调用 newTimeout() 方法再次提交当前任务，这样就会在下个周期执行该任务。即使在任务执行过程中出现了 GC、I/O 阻塞等情况，导致任务延迟或卡住，也不会有同样的任务源源不断地提交进来，导致任务堆积。</p><p>Dubbo 中对时间轮的应用主要体现在如下两个方面：</p><ul><li><strong>失败重试，</strong> 例如，Provider 向注册中心进行注册失败时的重试操作，或是 Consumer 向注册中心订阅时的失败重试等。</li><li><strong>周期性定时任务，</strong> 例如，定期发送心跳请求，请求超时的处理，或是网络连接断开后的重连机制。</li></ul><h4 id="举例-注册失败-失败重试" tabindex="-1"><a class="header-anchor" href="#举例-注册失败-失败重试" aria-hidden="true">#</a> 举例： 注册失败，失败重试</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span>FailbackRegistry</span>#register
 <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">acceptable</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;URL &quot;</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">&quot; will not be registered to Registry. Registry &quot;</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">&quot; does not accept service of this protocol type.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 完成本地文件缓存的初始化</span>
        <span class="token comment">// 清理failedRegistered集合和failedUnregistered集合，并取消相关任务</span>
        <span class="token function">removeFailedRegistered</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清理FailedRegisteredTask定时任务</span>
        <span class="token function">removeFailedUnregistered</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清理FailedUnregisteredTask定时任务</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// Sending a registration request to the server side</span>
            <span class="token function">doRegister</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 与服务发现组件进行交互，具体由子类实现</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Throwable</span> t <span class="token operator">=</span> e<span class="token punctuation">;</span>

            <span class="token comment">// If the startup detection is opened, the Exception is thrown directly.</span>
            <span class="token comment">// 检测check参数，决定是否直接抛出异常</span>
            <span class="token keyword">boolean</span> check <span class="token operator">=</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">CHECK_KEY</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
                    <span class="token operator">&amp;&amp;</span> url<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">CHECK_KEY</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
                    <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token constant">CONSUMER_PROTOCOL</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">boolean</span> skipFailback <span class="token operator">=</span> t <span class="token keyword">instanceof</span> <span class="token class-name">SkipFailbackWrapperException</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>check <span class="token operator">||</span> skipFailback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>skipFailback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    t <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to register &quot;</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">&quot; to registry &quot;</span> <span class="token operator">+</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, cause: &quot;</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to register &quot;</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">&quot;, waiting for retry, cause: &quot;</span> <span class="token operator">+</span> t<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

          	<span class="token comment">//这里重试</span>
            <span class="token comment">// 如果不抛出异常，则创建失败重试的任务，并添加到failedRegistered集合中</span>
            <span class="token function">addFailedRegistered</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addFailedRegistered</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">FailedRegisteredTask</span> oldOne <span class="token operator">=</span> failedRegistered<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldOne <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 已经存在重试任务，则无须创建，直接返回</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">FailedRegisteredTask</span> newTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FailedRegisteredTask</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        oldOne <span class="token operator">=</span> failedRegistered<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> newTask<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldOne <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果是新建的重试任务，则提交到时间轮中，等待retryPeriod毫秒后执行</span>
            retryTimer<span class="token punctuation">.</span><span class="token function">newTimeout</span><span class="token punctuation">(</span>newTask<span class="token punctuation">,</span> retryPeriod<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,48),o=[p];function i(c,l){return s(),a("div",null,o)}const k=n(t,[["render",i],["__file","Dubbo时间轮.html.vue"]]);export{k as default};
