const t=JSON.parse('{"key":"v-b96cc060","path":"/posts/%E4%BB%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9D%A5%E7%9C%8B%E7%A8%B3%E5%AE%9A%E6%80%A7%E5%BB%BA%E8%AE%BE.html","title":"从微服务来看稳定性建设","lang":"zh-CN","frontmatter":{"title":"从微服务来看稳定性建设","date":"2023-03-18T11:19:38.000Z","category":["coding"],"tag":["稳定性建设"],"description":"从微服务看稳定性建设 本文主要依据微服务，从\\"防范稳定性风险\\"和\\"降低故障影响\\"两个方面简单介绍了稳定性建面临的常见问题。 1.防范稳定性风险 微服务架构让微服务的功能更加内聚，迭代速度更快，但是呢，增加了服务依赖复杂性，进而增大了稳定性建设难度。尽管其依赖关系复杂，但可抽象为上游服务、自身服务、下游服务三者的关系，稳定性风险防范的主要思路是防范三者的风险。 上中下","head":[["meta",{"property":"og:url","content":"https://newzone.top/posts/%E4%BB%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9D%A5%E7%9C%8B%E7%A8%B3%E5%AE%9A%E6%80%A7%E5%BB%BA%E8%AE%BE.html"}],["meta",{"property":"og:site_name","content":"田野放空"}],["meta",{"property":"og:title","content":"从微服务来看稳定性建设"}],["meta",{"property":"og:description","content":"从微服务看稳定性建设 本文主要依据微服务，从\\"防范稳定性风险\\"和\\"降低故障影响\\"两个方面简单介绍了稳定性建面临的常见问题。 1.防范稳定性风险 微服务架构让微服务的功能更加内聚，迭代速度更快，但是呢，增加了服务依赖复杂性，进而增大了稳定性建设难度。尽管其依赖关系复杂，但可抽象为上游服务、自身服务、下游服务三者的关系，稳定性风险防范的主要思路是防范三者的风险。 上中下"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-13T08:00:44.000Z"}],["meta",{"property":"article:author","content":"田野"}],["meta",{"property":"article:tag","content":"稳定性建设"}],["meta",{"property":"article:published_time","content":"2023-03-18T11:19:38.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-13T08:00:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"从微服务来看稳定性建设\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-18T11:19:38.000Z\\",\\"dateModified\\":\\"2023-08-13T08:00:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"田野\\",\\"url\\":\\"https://colania.github.io\\"}]}"]]},"headers":[{"level":2,"title":"1.防范稳定性风险","slug":"_1-防范稳定性风险","link":"#_1-防范稳定性风险","children":[{"level":3,"title":"1.1 防范上游风险","slug":"_1-1-防范上游风险","link":"#_1-1-防范上游风险","children":[]},{"level":3,"title":"1.2 防范下游风险","slug":"_1-2-防范下游风险","link":"#_1-2-防范下游风险","children":[]},{"level":3,"title":"1.3 防范自身风险","slug":"_1-3-防范自身风险","link":"#_1-3-防范自身风险","children":[]}]},{"level":2,"title":"2. 降低故障影响","slug":"_2-降低故障影响","link":"#_2-降低故障影响","children":[{"level":3,"title":"2.1 自身接口降级","slug":"_2-1-自身接口降级","link":"#_2-1-自身接口降级","children":[]},{"level":3,"title":"2.2 故障感知和定位","slug":"_2-2-故障感知和定位","link":"#_2-2-故障感知和定位","children":[]}]}],"git":{"createdTime":1691906014000,"updatedTime":1691913644000,"contributors":[{"name":"colania","email":"465533104@qq.com","commits":4}]},"readingTime":{"minutes":5.87,"words":1762},"filePathRelative":"_posts/从微服务来看稳定性建设.md","localizedDate":"2023年3月18日","excerpt":"<h1> 从微服务看稳定性建设</h1>\\n<p>本文主要依据微服务，从\\"防范稳定性风险\\"和\\"降低故障影响\\"两个方面简单介绍了稳定性建面临的常见问题。</p>\\n<h2> 1.防范稳定性风险</h2>\\n<p>微服务架构让微服务的功能更加内聚，迭代速度更快，但是呢，增加了服务依赖复杂性，进而增大了稳定性建设难度。尽管其依赖关系复杂，但可抽象为上游服务、自身服务、下游服务三者的关系，稳定性风险防范的主要思路是防范三者的风险。</p>\\n<figure><img src=\\"https://bard-note.oss-cn-hangzhou.aliyuncs.com/img/上中下.png\\" alt=\\"上中下\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>上中下</figcaption></figure>","autoDesc":true}');export{t as data};
