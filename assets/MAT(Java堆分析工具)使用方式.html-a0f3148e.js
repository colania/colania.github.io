const e=JSON.parse('{"key":"v-43d14926","path":"/posts/MAT(Java%E5%A0%86%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7)%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F.html","title":"MAT(Java堆分析工具)使用方式","lang":"zh-CN","frontmatter":{"title":"MAT(Java堆分析工具)使用方式","date":"2023-03-29T15:11:29.000Z","category":["coding"],"tag":["tools"],"description":"MAT(Java堆分析工具)使用方式 最近在整理笔记，发现之前在分析JAVA内存问题时写的Mat工具文档还是蛮清晰的，现重新整理一下，分享出来。 MAT是个啥 MAT 全称 Eclipse Memory Analysis Tools 是一个分析 Java堆数据的专业工具，可以计算出内存中对象的实例数量、占用空间大小、引用关系等，看看是谁阻止了垃圾收集器的回收工作，从而定位内存泄漏的原因。 什么时候会用到 OutOfMemoryError的时候，触发full gc，但空间却回收不了，引发内存泄露 java服务器系统异常，比如load飙高，io异常，或者线程死锁等，都可能通过分析堆中的内存对象来定位原因","head":[["meta",{"property":"og:url","content":"https://newzone.top/posts/MAT(Java%E5%A0%86%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7)%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"田野放空"}],["meta",{"property":"og:title","content":"MAT(Java堆分析工具)使用方式"}],["meta",{"property":"og:description","content":"MAT(Java堆分析工具)使用方式 最近在整理笔记，发现之前在分析JAVA内存问题时写的Mat工具文档还是蛮清晰的，现重新整理一下，分享出来。 MAT是个啥 MAT 全称 Eclipse Memory Analysis Tools 是一个分析 Java堆数据的专业工具，可以计算出内存中对象的实例数量、占用空间大小、引用关系等，看看是谁阻止了垃圾收集器的回收工作，从而定位内存泄漏的原因。 什么时候会用到 OutOfMemoryError的时候，触发full gc，但空间却回收不了，引发内存泄露 java服务器系统异常，比如load飙高，io异常，或者线程死锁等，都可能通过分析堆中的内存对象来定位原因"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-13T06:00:02.000Z"}],["meta",{"property":"article:author","content":"田野"}],["meta",{"property":"article:tag","content":"tools"}],["meta",{"property":"article:published_time","content":"2023-03-29T15:11:29.000Z"}],["meta",{"property":"article:modified_time","content":"2023-08-13T06:00:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MAT(Java堆分析工具)使用方式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-29T15:11:29.000Z\\",\\"dateModified\\":\\"2023-08-13T06:00:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"田野\\",\\"url\\":\\"https://colania.github.io\\"}]}"]]},"headers":[{"level":2,"title":"MAT是个啥","slug":"mat是个啥","link":"#mat是个啥","children":[]},{"level":2,"title":"什么时候会用到","slug":"什么时候会用到","link":"#什么时候会用到","children":[]},{"level":2,"title":"怎么安装","slug":"怎么安装","link":"#怎么安装","children":[]},{"level":2,"title":"如何使用","slug":"如何使用","link":"#如何使用","children":[{"level":3,"title":"分析文件生成方式","slug":"分析文件生成方式","link":"#分析文件生成方式","children":[]},{"level":3,"title":"使用MAT","slug":"使用mat","link":"#使用mat","children":[]}]},{"level":2,"title":"MAT功能","slug":"mat功能","link":"#mat功能","children":[{"level":3,"title":"Histogram","slug":"histogram","link":"#histogram","children":[]},{"level":3,"title":"Dominator Tree","slug":"dominator-tree","link":"#dominator-tree","children":[]},{"level":3,"title":"Leak Suspects","slug":"leak-suspects","link":"#leak-suspects","children":[]},{"level":3,"title":"Thread_Overview","slug":"thread-overview","link":"#thread-overview","children":[]},{"level":3,"title":"Heap Dump Overview","slug":"heap-dump-overview","link":"#heap-dump-overview","children":[]}]}],"git":{"createdTime":1691906014000,"updatedTime":1691906402000,"contributors":[{"name":"colania","email":"465533104@qq.com","commits":2}]},"readingTime":{"minutes":4.46,"words":1337},"filePathRelative":"_posts/MAT(Java堆分析工具)使用方式.md","localizedDate":"2023年3月29日","excerpt":"<h1> MAT(Java堆分析工具)使用方式</h1>\\n<p>最近在整理笔记，发现之前在分析JAVA内存问题时写的Mat工具文档还是蛮清晰的，现重新整理一下，分享出来。</p>\\n<h2> MAT是个啥</h2>\\n<p>MAT 全称 <code>Eclipse Memory Analysis Tools</code> 是一个分析 Java堆数据的专业工具，可以计算出内存中对象的实例数量、占用空间大小、引用关系等，看看是谁阻止了垃圾收集器的回收工作，从而定位内存泄漏的原因。</p>\\n<h2> 什么时候会用到</h2>\\n<ul>\\n<li>OutOfMemoryError的时候，触发full gc，但空间却回收不了，引发内存泄露</li>\\n<li>java服务器系统异常，比如load飙高，io异常，或者线程死锁等，都可能通过分析堆中的内存对象来定位原因</li>\\n</ul>","autoDesc":true}');export{e as data};
